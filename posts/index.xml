<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Lswith&#39;s Blog</title>
		<link>https://lswith.io/posts/</link>
		<description>Recent content in Posts on Lswith&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 29 Dec 2018 17:23:30 +1100</lastBuildDate>
		<atom:link href="https://lswith.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Kubeconf 2018: The Overview</title>
			<link>https://lswith.io/posts/kubeconf-2018/</link>
			<pubDate>Sat, 29 Dec 2018 17:23:30 +1100</pubDate>
			
			<guid>https://lswith.io/posts/kubeconf-2018/</guid>
			<description>I attended KubeConf 2018 in Seattle a week ago. I&amp;rsquo;ve decided to distill the core concepts that I think are important from the conference into this blog post.
I can categorize what the conference was trying to push into 5 concepts:
 Observability is King Do 1 Thing Well Choose Tools Appropriately Everyone Needs to know Cloud Ops Be Cloud Provider Agnostic  These aren&amp;rsquo;t new ideas but they were so prominent and spoken about in so many ways that they seemed novel and obvious.</description>
			<content type="html"><![CDATA[

<p>I attended KubeConf 2018 in Seattle a week ago.
I&rsquo;ve decided to distill the core concepts that I think are important from the conference into this blog post.</p>

<p>I can categorize what the conference was trying to push into 5 concepts:</p>

<ul>
<li><strong>Observability is King</strong></li>
<li><strong>Do 1 Thing Well</strong></li>
<li><strong>Choose Tools Appropriately</strong></li>
<li><strong>Everyone Needs to know Cloud Ops</strong></li>
<li><strong>Be Cloud Provider Agnostic</strong></li>
</ul>

<p>These aren&rsquo;t new ideas but they were so prominent and spoken about in so many ways that they seemed
novel and obvious.</p>

<h2 id="observability-is-king">Observability is King</h2>

<blockquote>
<p>observability is a measure of how well internal states of a system can be inferred from knowledge of its external outputs.</p>
</blockquote>

<p>Observability was pushed so much at Kubeconf and was the star of the show. It seemed that all the major tools
and new features in Kubernetes were all about increasing visibility into the systems that you run and the
systems that you rely on.</p>

<p><a href="https://www.envoyproxy.io/" target="_blank">Envoy</a> and <a href="https://istio.io/" target="_blank">Istio</a> are chosen not only for performance reasons but because people needed a way to
observe the network they rely on.</p>

<p><em>Working in the cloud, you quickly realise that not every scenario and failure can be tested for.</em>
It&rsquo;s a much better idea to observe what is going on in production and when the alert when things fail.</p>

<p><a href="https://prometheus.io/" target="_blank">Prometheus</a> has now been used extensively in production and has been rolled out in many, many different ways
across people&rsquo;s systems. It along with <a href="https://www.jaegertracing.io/" target="_blank">Jaegar</a> seem to be where the industry is moving and consolidating around.</p>

<p>Even Kubernetes has increased its metric output as it realised that it was required to better maintain the cluster.</p>

<h2 id="do-1-thing-well">Do 1 Thing Well</h2>

<p>In an architecture, doing 1 thing well means making sure that each individual part of the system does 1 thing,
and has a <strong>clear boundary</strong> around that 1 thing. This clear boundary means that things become easier to debug,
easier to reason about, and easier to compose into something larger.</p>

<p>In the tooling space, pick the tool that is easiest to compose with other tools and that
only does 1 thing. This allows you to fully leverage it and compose it
into your system.</p>

<p>In business, doing 1 thing well is about focusing on what is core to your business and outsourcing
what isn&rsquo;t. Making sure to do 1 thing well, allows you to be agile enough to change and compose
what you provide as necessary and gives focus to the product.</p>

<p>Being able to seperate out each part into the 1 thing it does also allows for a better idea of how
that thing is being used. This means, that backwards compatibility becomes easier to manage
and reliability then increases 10 fold.</p>

<h2 id="choose-tools-appropriately">Choose Tools Appropriately</h2>

<p>Everyone loves tools. <em>Everyone</em> has too many tools. Consolidate into what is necessary,
and discard what isn&rsquo;t.</p>

<p>Choosing the right tools is <strong>incredibily important</strong> and they should be chosen  with care.
An acronym that was mentioned was:</p>

<p>AEIOU:</p>

<ul>
<li><em>Applicable</em>: does this tool solve the issue at hand?</li>
<li><em>Enterprise Readiness</em>: Is this tool ready for scale?</li>
<li><em>Integrate</em>: Can this tool be easily integrated into the platform?</li>
<li><em>Overhead</em>: How much maintainance does this tool require?</li>
<li><em>Useful</em>: Is this tool actually useful?</li>
</ul>

<p>Using this acroynm helps to better evaluate if a tool is right for the job or whether doing something
in house is needed.</p>

<h2 id="everyone-needs-to-know-cloud-ops">Everyone needs to know Cloud Ops</h2>

<p>To really embrace the cloud, you need a large amount of knowledge in using the cloud.
It&rsquo;s synonomous with relearning how to run a server except now its much more complicated.</p>

<p>Being able to get everyone trained up to understand how things run in the cloud (or on Kubernetes)
means that it&rsquo;s easier for them to reason about how the system interacts.
<strong>Developers and others need to know how to run and debug their code in any environment.</strong></p>

<p>The good thing is that now that Kubernetes is becoming the defactor standard, its becoming much
more valuable to learn how things run on Kubernetes and the learnings are much more standardised
and universal than ever before.</p>

<h2 id="be-cloud-provider-agnostic">Be Cloud Provider Agnostic</h2>

<p>Kubernetes is a great platform for shipping code anywhere. Your servers, your customer&rsquo;s servers,
or someone else&rsquo;s. This also means that writing your code to be cloud agnostic is vital.</p>

<p>If you want to truly be able to deploy anywhere, you need to minimise your dependencies
on anything that isn&rsquo;t installable on kubernetes.</p>

<p>There were a few case studies about how a multitude of products were shipped on
their customer&rsquo;s servers through the use of kubernetes.</p>

<hr />

<p>Hopefully, these concepts will bring the same amount of inspiration that KubeConf has done for me!</p>
]]></content>
		</item>
		
	</channel>
</rss>
